package com.wellcare.security;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;

import java.security.Key;
import java.util.Date;

@Component
public class JwtUtil {

	 private final Key key;
	    private final long expiration;

	    public JwtUtil(@Value("${jwt.secret}") String secret,
	                   @Value("${jwt.expiration}") long expiration) {
	        this.key = Keys.hmacShaKeyFor(secret.getBytes());
	        this.expiration = expiration;
	    }
	//Generate Token with username
	public String generateToken(String username) {
		return Jwts.builder()
				.setSubject(username)
				.setIssuedAt(new Date())
				.setExpiration(new Date(System.currentTimeMillis() + expiration))
				.signWith(key, SignatureAlgorithm.HS256)
				.compact();
	}
	
	//Extract username from token
	public String extractUsername(String token) {
		return parseToken(token).getBody().getSubject();
	}
	
	//Validate Token
	
	public boolean validateToken(String token, String username) {
        final String extractedUsername = extractUsername(token);
        return (username.equals(extractedUsername) && !isTokenExpired(token));
    }

    private boolean isTokenExpired(String token) {
        Date expiration = parseToken(token).getBody().getExpiration();
        return expiration.before(new Date());
    }
	
	
	private Jws<Claims> parseToken(String token) {
		return Jwts.parserBuilder()
				.setSigningKey(key)
				.build()
				.parseClaimsJws(token);
	}
	
	
}
