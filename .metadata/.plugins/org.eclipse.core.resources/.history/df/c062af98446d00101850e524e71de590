package com.wellcare.serviceImpl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.wellcare.dto.PatientDto;
import com.wellcare.entities.Patient;
import com.wellcare.repositories.PatientRepository;
import com.wellcare.repositories.UserRepository;
import com.wellcare.service.PatientService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class PatientServiceImpl implements PatientService {@Override

private final PatientRepository patientRepository;
private final UserRepository userRepository;
private final PatientIdGenerator patientIdGenerator;

// DTO → Entity
private Patient mapToEntity(PatientDto dto) {
    User user = userRepository.findById(dto.getUserId())
            .orElseThrow(() -> new ResourceNotFoundException("User not found with id: " + dto.getUserId()));

    return Patient.builder()
            .id(dto.getId())
            .name(dto.getName())
            .phone(dto.getPhone())
            .age(dto.getAge())
            .address(dto.getAddress())
            .user(user)
            .build();
}

// Entity → DTO
private PatientDto mapToDto(Patient patient) {
    return PatientDto.builder()
            .id(patient.getId())
            .name(patient.getName())
            .phone(patient.getPhone())
            .age(patient.getAge())
            .address(patient.getAddress())
            .userId(patient.getUser().getId())
            .build();
}

@Override
@Transactional
@CacheEvict(value = "patients", allEntries = true)
public PatientDto createPatient(PatientDto patientDto) {
    Patient patient = mapToEntity(patientDto);
    String generatedId = patientIdGenerator.generatePatientId(patient.getName());
    patient.setId(generatedId);
    Patient saved = patientRepository.save(patient);
    return mapToDto(saved);
}

@Override
@Cacheable("patients")
public List<PatientDto> getAllPatients() {
    return patientRepository.findAll()
            .stream()
            .map(this::mapToDto)
            .collect(Collectors.toList());
}

@Override
public PatientDto getPatientById(String id) {
    Patient patient = patientRepository.findById(id)
            .orElseThrow(() -> new ResourceNotFoundException("Patient not found with id: " + id));
    return mapToDto(patient);
}

@Override
public PatientDto updatePatient(String id, PatientDto patientDto) {
    Patient patient = patientRepository.findById(id)
            .orElseThrow(() -> new ResourceNotFoundException("Patient not found with id: " + id));

    patient.setName(patientDto.getName());
    patient.setPhone(patientDto.getPhone());
    patient.setAge(patientDto.getAge());
    patient.setAddress(patientDto.getAddress());

    // Update user if needed
    if (!patient.getUser().getId().equals(patientDto.getUserId())) {
        User newUser = userRepository.findById(patientDto.getUserId())
                .orElseThrow(() -> new ResourceNotFoundException("User not found with id: " + patientDto.getUserId()));
        patient.setUser(newUser);
    }

    Patient updated = patientRepository.save(patient);
    return mapToDto(updated);
}

@Override
public void deletePatient(String id) {
    Patient patient = patientRepository.findById(id)
            .orElseThrow(() -> new ResourceNotFoundException("Patient not found with id: " + id));
    patientRepository.delete(patient);
}

}
